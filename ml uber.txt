import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import mean_squared_error, r2_score

df = pd.read_csv("uber.csv")
df.head()

df.dropna(inplace=True)
df['pickup_datetime'] = pd.to_datetime(df['pickup_datetime'])
df['pickup_day'] = df['pickup_datetime'].dt.day_of_week
df['pickup_date'] = df['pickup_datetime'].dt.date
df['pickup_hour'] = df['pickup_datetime'].dt.hour
df['pickup_year'] = df['pickup_datetime'].dt.year

def haversine(lat1, long1, lat2, long2):
    lat1, long1, lat2, long2 = map(np.radians, [lat1, long1, lat2, long2])
    diffLat = lat2-lat1
    diffLong = long2-long1
    a = np.sin(diffLat/2)**2 * np.cos(diffLong/2)**2 + np.cos((lat1 + lat2)/2)**2 * np.sin(diffLong/2)**2
    b = 2 * 6378 * np.arcsin(np.sqrt(a))
    return b
df['distance'] = df.apply(lambda row: haversine(row['pickup_latitude'], row['pickup_longitude'], row['dropoff_latitude'], row['dropoff_longitude']), axis = 1)

df.head()

plt.scatter(df['distance'], df['fare_amount'])
plt.show()

sns.boxplot(x=df['fare_amount'])
plt.show()

df.drop(df[df['distance'] == 0].index, inplace = True)
df.drop(df[df['distance'] > 60].index, inplace = True)
df.drop(df[df['fare_amount'] > 100].index, inplace = True)
df.drop(df[df['fare_amount'] < 0].index, inplace = True)
df.drop(df[df['passenger_count'] > 6].index, inplace = True)
df.notna().sum()

sns.boxplot(x=df['fare_amount'])
plt.title('Boxplot of Fare Amount')
plt.show()

x = df[['distance', 'pickup_year']]
y = df['fare_amount']
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=10)

linear_model = LinearRegression()
linear_model.fit(x_train, y_train)
y_pred_linear = linear_model.predict(x_test)
rmse_linear = np.sqrt(mean_squared_error(y_pred_linear, y_test))
r2_linear = r2_score(y_test, y_pred_linear)
print("RMSE : ", rmse_linear)
print("R2 : ", r2_linear)

rf_model = RandomForestRegressor(random_state=80)
rf_model.fit(x_train, y_train)
y_pred_rf = rf_model.predict(x_test)
rmse_rf = np.sqrt(mean_squared_error(y_pred_rf, y_test))
r2_rf = r2_score(y_test, y_pred_rf)
print("RMSE : ", rmse_rf)
print("R2 : ", r2_rf)

knn = KNeighborsRegressor(n_neighbors=140)
knn.fit(x_train, y_train)
y_pred_knn = knn.predict(x_test)
rmse_knn = np.sqrt(mean_squared_error(y_pred_knn, y_test))
r2_knn = r2_score(y_test, y_pred_knn)
print("RMSE : ", rmse_knn)
print("R2 : ", r2_knn)
